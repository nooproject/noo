{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Noo is a project templating tool designed to make creating new projects as easy and simple as possible. It is based on the noofile specification. Installation \u00b6 From PyPI: pip install pynoo From GitHub pip install git+https://github.com/py-noo/noo Source \u00b6 The Noo source code can be found here . Examples \u00b6 Example noofiles can be found in the noo GitHub repository .","title":"Home"},{"location":"#installation","text":"From PyPI: pip install pynoo From GitHub pip install git+https://github.com/py-noo/noo","title":"Installation"},{"location":"#source","text":"The Noo source code can be found here .","title":"Source"},{"location":"#examples","text":"Example noofiles can be found in the noo GitHub repository .","title":"Examples"},{"location":"noofile/","text":"Noofiles \u00b6 A noofile is a definition of a template project. It contains all the instructions required to set up a new project automatically. Example noofiles can be found in the noo GitHub repository . There are two types of noofiles, clone and modify noofiles. Clone noofiles must define a remote, while modify noofiles are just a sequence of steps. Noofiles are defined using YAML syntax. Since JSON is valid YAML, it is possible to use JSON as well. name \u00b6 This field is the name of the Noo template. It will be used when showing messages to the user suring setup, it will not affect the template itself in any way. This field is required. remote \u00b6 This field is the remote location of the template repository. This can be in two different formats currently: git: - This is the GitHub format. It can be used like this: git:vcokltfre/api-template file: - This is the local file format. It can be used like this: file:~/templates/api-template This field is required for cloning a noofile, but is not required when using noo mod . noo_version \u00b6 This field specifies the Noo version the noofile is compatible with. The only allowed value currently is 2 . This field is required and is an integer. read \u00b6 This field is a list of variables to read from the user. Each variable is defined by a Read object. Any variables defined here can be accessed using $$var:varname in supported fields. This field is optional. steps \u00b6 This field is the core of a noofile. It defines the steps to take to set up a new project. Each step is defined by a Step object. This field is required. Variables \u00b6 The following is a list of built in variables. They can be accessed by using $$noo:varname in supported fields. Name Description name The name of the noo project provided to the clone command. year The current year. month The current month. (An integer starting from 1) day The current day. (An integer starting from 1) hour The current hour. minute The current minute. second The current second. Objects \u00b6 Read Object \u00b6 Field Type Description name str The name of the variable to read. prompt str The prompt to display when reading the variable. default ?str An optional default value. required bool; default=true Whether this varable must be a non-empty string. Step Object \u00b6 Field Type Description name str The name of the setup step. actions list[ Action ] The list of actions in the step. conditions ?list[ Condition ] An optional list of conditions required for the step to run. Action Objects \u00b6 Replace action \u00b6 Replace actions are used to replace a specific string in a file. Field Type Description action literal[replace] The type of action, This is always \"replace\". files list[str] The list of files to perform the replacement in. src str The source string to be replaced. dest str The destination string. This is formatted with the defined variables. Delete action \u00b6 Delete actions are used to delete files. Field Type Description action literal[delete] The type of action, This is always \"delete\". files list[str] The list of files to delete. Create action \u00b6 Create actions are used to create files. Field Type Description action literal[create] The type of action, This is always \"create\". files str The filename to create. content ?str The content of the file. This is formatted with the defined variables. Rename action \u00b6 Rename actions are used to rename files. Field Type Description action literal[rename] The type of action, This is always \"rename\". files str The file to rename. dest str The new filename. This is formatted with the defined variables. Command Action \u00b6 Command actions are used to run shell commands. These commands are only run if --shell is explicitly specified by the user, or the user has set shell to allow by default using noo conf set shell allow . Field Type Description action literal[command] The type of action, This is always \"command\". command str The command to run. This is formatted with the defined variables. fail bool; default=true Whether the whole process should fail if the command returns a non-zero exit code. cwd str; default=. The working directory for the command. Defaults to the project directory for clone or the current directory for mod . Remote Action \u00b6 Remote actions are used to run additional modify noofiles in another noofile. Field Type Description action str The type of action, This is always \"remote\". remote str The noofile to run. This supports the same refs as noo clone and noo mod Condition Object \u00b6 Field Type Description op Literal[ OpType ] The operation to perform. var str The variable to compare, i.e. noo:year. value str The value to compare to. OpType \u00b6 List of operation types: Name Operation eq Equals ne Not Equals gt Greater Than lt Less Than ge Greater Than or Equals le Less Than or Equals","title":"Noofiles"},{"location":"noofile/#noofiles","text":"A noofile is a definition of a template project. It contains all the instructions required to set up a new project automatically. Example noofiles can be found in the noo GitHub repository . There are two types of noofiles, clone and modify noofiles. Clone noofiles must define a remote, while modify noofiles are just a sequence of steps. Noofiles are defined using YAML syntax. Since JSON is valid YAML, it is possible to use JSON as well.","title":"Noofiles"},{"location":"noofile/#name","text":"This field is the name of the Noo template. It will be used when showing messages to the user suring setup, it will not affect the template itself in any way. This field is required.","title":"name"},{"location":"noofile/#remote","text":"This field is the remote location of the template repository. This can be in two different formats currently: git: - This is the GitHub format. It can be used like this: git:vcokltfre/api-template file: - This is the local file format. It can be used like this: file:~/templates/api-template This field is required for cloning a noofile, but is not required when using noo mod .","title":"remote"},{"location":"noofile/#noo_version","text":"This field specifies the Noo version the noofile is compatible with. The only allowed value currently is 2 . This field is required and is an integer.","title":"noo_version"},{"location":"noofile/#read","text":"This field is a list of variables to read from the user. Each variable is defined by a Read object. Any variables defined here can be accessed using $$var:varname in supported fields. This field is optional.","title":"read"},{"location":"noofile/#steps","text":"This field is the core of a noofile. It defines the steps to take to set up a new project. Each step is defined by a Step object. This field is required.","title":"steps"},{"location":"noofile/#variables","text":"The following is a list of built in variables. They can be accessed by using $$noo:varname in supported fields. Name Description name The name of the noo project provided to the clone command. year The current year. month The current month. (An integer starting from 1) day The current day. (An integer starting from 1) hour The current hour. minute The current minute. second The current second.","title":"Variables"},{"location":"noofile/#objects","text":"","title":"Objects"},{"location":"noofile/#read-object","text":"Field Type Description name str The name of the variable to read. prompt str The prompt to display when reading the variable. default ?str An optional default value. required bool; default=true Whether this varable must be a non-empty string.","title":"Read Object"},{"location":"noofile/#step-object","text":"Field Type Description name str The name of the setup step. actions list[ Action ] The list of actions in the step. conditions ?list[ Condition ] An optional list of conditions required for the step to run.","title":"Step Object"},{"location":"noofile/#action-objects","text":"","title":"Action Objects"},{"location":"noofile/#replace-action","text":"Replace actions are used to replace a specific string in a file. Field Type Description action literal[replace] The type of action, This is always \"replace\". files list[str] The list of files to perform the replacement in. src str The source string to be replaced. dest str The destination string. This is formatted with the defined variables.","title":"Replace action"},{"location":"noofile/#delete-action","text":"Delete actions are used to delete files. Field Type Description action literal[delete] The type of action, This is always \"delete\". files list[str] The list of files to delete.","title":"Delete action"},{"location":"noofile/#create-action","text":"Create actions are used to create files. Field Type Description action literal[create] The type of action, This is always \"create\". files str The filename to create. content ?str The content of the file. This is formatted with the defined variables.","title":"Create action"},{"location":"noofile/#rename-action","text":"Rename actions are used to rename files. Field Type Description action literal[rename] The type of action, This is always \"rename\". files str The file to rename. dest str The new filename. This is formatted with the defined variables.","title":"Rename action"},{"location":"noofile/#command-action","text":"Command actions are used to run shell commands. These commands are only run if --shell is explicitly specified by the user, or the user has set shell to allow by default using noo conf set shell allow . Field Type Description action literal[command] The type of action, This is always \"command\". command str The command to run. This is formatted with the defined variables. fail bool; default=true Whether the whole process should fail if the command returns a non-zero exit code. cwd str; default=. The working directory for the command. Defaults to the project directory for clone or the current directory for mod .","title":"Command Action"},{"location":"noofile/#remote-action","text":"Remote actions are used to run additional modify noofiles in another noofile. Field Type Description action str The type of action, This is always \"remote\". remote str The noofile to run. This supports the same refs as noo clone and noo mod","title":"Remote Action"},{"location":"noofile/#condition-object","text":"Field Type Description op Literal[ OpType ] The operation to perform. var str The variable to compare, i.e. noo:year. value str The value to compare to.","title":"Condition Object"},{"location":"noofile/#optype","text":"List of operation types: Name Operation eq Equals ne Not Equals gt Greater Than lt Less Than ge Greater Than or Equals le Less Than or Equals","title":"OpType"}]}